// Code generated by go-bindata.
// sources:
// _template/LICENSE
// _template/README.md
// _template/main.go
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateLicense = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4d\x6f\xe3\x36\x13\xbe\xf3\x57\x3c\xc8\x29\x01\x84\xbc\x6f\x7b\x29\xd0\x1b\x23\xd1\x16\x51\x89\x34\x28\x7a\x5d\x1f\x69\x89\x8e\x58\xc8\xa2\x21\xd2\x0d\xf2\xef\x8b\x91\x9d\xdd\x6e\x4f\x82\x38\xf3\x7c\x8e\x1d\x3d\x5a\x69\xd1\x84\xde\xcf\xc9\xe3\xb9\x95\xf6\x85\xb1\x32\x5e\x3f\x97\xf0\x3e\x66\x3c\xf7\x2f\xf8\xf5\xff\xbf\xfc\x86\x63\xbc\x2d\x50\xee\xe2\x19\xdb\xf9\xe5\x12\x52\x0a\x71\x46\x48\x18\xfd\xe2\x4f\x9f\x78\x5f\xdc\x9c\xfd\x50\xe0\xbc\x78\x8f\x78\x46\x3f\xba\xe5\xdd\x17\xc8\x11\x6e\xfe\xc4\xd5\x2f\x29\xce\x88\xa7\xec\xc2\x1c\xe6\x77\x38\xf4\xf1\xfa\xc9\xe2\x19\x79\x0c\x09\x29\x9e\xf3\x87\x5b\x3c\xdc\x3c\xc0\xa5\x14\xfb\xe0\xb2\x1f\x30\xc4\xfe\x76\xf1\x73\x76\x99\xf4\xce\x61\xf2\x09\xcf\x79\xf4\x78\xea\x1e\x88\xa7\x97\x55\x64\xf0\x6e\x62\x61\x06\xcd\xbe\x46\xf8\x08\x79\x8c\xb7\x8c\xc5\xa7\xbc\x84\x9e\x38\x0a\x84\xb9\x9f\x6e\x03\x79\xf8\x1a\x4f\xe1\x12\x1e\x0a\x04\x5f\xa3\x27\x96\x23\x6e\xc9\x17\xab\xcf\x02\x97\x38\x84\x33\x7d\xfd\x1a\xeb\x7a\x3b\x4d\x21\x8d\x05\x86\x40\xd4\xa7\x5b\xf6\x05\x12\x3d\xae\x4d\x16\x94\xe3\x7f\x71\x41\xf2\xd3\xc4\xfa\x78\x0d\x3e\x61\xcd\xfa\xc3\xdd\xba\x43\xd6\xaf\x54\x68\x7e\x54\x94\xe8\xe5\x63\x8c\x97\x9f\x93\x84\xc4\xce\xb7\x65\x0e\x69\xf4\x2b\x66\x88\x48\x71\x55\xfc\xcb\xf7\x99\x5e\x68\xfd\x1c\xa7\x29\x7e\x50\xb4\x3e\xce\x43\xa0\x44\xe9\x77\xc6\xe8\xcc\xee\x14\xff\xf6\x6b\x96\xfb\x65\xe7\x98\x43\x7f\xaf\x7b\x3d\xc0\xf5\xc7\x55\x1f\xa3\x34\xba\x69\xc2\xc9\x3f\x0a\xf3\x03\xc2\x0c\xf7\xaf\x38\x0b\xc9\xa7\xec\xe6\x1c\xdc\x84\x6b\x5c\x56\xbd\xff\xc6\x7c\x65\xcc\xd6\x02\x9d\xde\xd8\x03\x37\x02\xb2\xc3\xce\xe8\x6f\xb2\x12\x15\x9e\x78\x07\xd9\x3d\x15\x38\x48\x5b\xeb\xbd\xc5\x81\x1b\xc3\x95\x3d\x42\x6f\xc0\xd5\x11\x7f\x48\x55\x15\x10\x7f\xee\x8c\xe8\x3a\x68\xc3\x64\xbb\x6b\xa4\xa8\x0a\x48\x55\x36\xfb\x4a\xaa\x2d\xde\xf6\x16\x4a\x5b\x34\xb2\x95\x56\x54\xb0\x1a\x24\xf8\xa0\x92\xa2\x23\xb2\x56\x98\xb2\xe6\xca\xf2\x37\xd9\x48\x7b\x2c\xd8\x46\x5a\x45\x9c\x1b\x6d\xc0\xb1\xe3\xc6\xca\x72\xdf\x70\x83\xdd\xde\xec\x74\x27\xc0\x55\x05\xa5\x95\x54\x1b\x23\xd5\x56\xb4\x42\xd9\x57\x48\x05\xa5\x21\xbe\x09\x65\xd1\xd5\xbc\x69\x48\x8a\xf1\xbd\xad\xb5\x21\x7f\x28\xf5\xee\x68\xe4\xb6\xb6\xa8\x75\x53\x09\xd3\xe1\x4d\xa0\x91\xfc\xad\x11\x77\x29\x75\x44\xd9\x70\xd9\x16\xa8\x78\xcb\xb7\x62\x45\x69\x5b\x0b\xc3\x68\xed\xee\x0e\x87\x5a\xd0\x13\xe9\x71\x05\x5e\x5a\xa9\x15\xc5\x28\xb5\xb2\x86\x97\xb6\x80\xd5\xc6\x7e\x87\x1e\x64\x27\x0a\x70\x23\x3b\x2a\x64\x63\x74\x5b\x30\xaa\x53\x6f\x68\x45\x2a\xc2\x29\x71\x67\xa1\xaa\xf1\xd3\x45\xb4\x59\xff\xf7\x9d\xf8\x4e\x88\x4a\xf0\x46\xaa\x6d\x47\x60\x8a\xf8\xb5\xfc\xca\xfe\x09\x00\x00\xff\xff\xf2\x43\x14\xfe\x34\x04\x00\x00")

func _templateLicenseBytes() ([]byte, error) {
	return bindataRead(
		__templateLicense,
		"_template/LICENSE",
	)
}

func _templateLicense() (*asset, error) {
	bytes, err := _templateLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/LICENSE", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1507485670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\x2c\x28\xf0\x4b\xcc\x4d\xe5\xe2\x72\x2c\x28\x50\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xe3\x02\x04\x00\x00\xff\xff\xac\xd1\x84\x70\x1b\x00\x00\x00")

func _templateReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		__templateReadmeMd,
		"_template/README.md",
	)
}

func _templateReadmeMd() (*asset, error) {
	bytes, err := _templateReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/README.md", size: 27, mode: os.FileMode(420), modTime: time.Unix(1507483120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe2\x54\x4a\xcb\x2d\x51\xe2\xd2\xe4\xe2\x4a\x2b\xcd\x4b\x06\xcb\x6a\x68\x2a\x54\x73\x71\xa6\xe5\x96\xe8\x05\x14\x65\xe6\x95\xe4\xe4\x69\x28\x65\xa4\xe6\xe4\xe4\x2b\x94\xe7\x17\xe5\xa4\x28\x69\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x05\x47\xdb\x0b\x4d\x00\x00\x00")

func _templateMainGoBytes() ([]byte, error) {
	return bindataRead(
		__templateMainGo,
		"_template/main.go",
	)
}

func _templateMainGo() (*asset, error) {
	bytes, err := _templateMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.go", size: 77, mode: os.FileMode(420), modTime: time.Unix(1507485634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/LICENSE": _templateLicense,
	"_template/README.md": _templateReadmeMd,
	"_template/main.go": _templateMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"LICENSE": &bintree{_templateLicense, map[string]*bintree{}},
		"README.md": &bintree{_templateReadmeMd, map[string]*bintree{}},
		"main.go": &bintree{_templateMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

